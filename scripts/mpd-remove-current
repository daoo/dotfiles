#!/bin/bash

# Script for removing the currently playing song from your mpd queue and a selected m3u file.
# Needs mpd and mpc

MPC_NO_ARGS="$(which mpc)"
MPC="$MPC_NO_ARGS -q"

MPD_DIR="$HOME/.mpd/"
MPD="$(which mpd) $MPD_DIR/mpd.conf"

M3U="$MPD_DIR/playlists/list.m3u"

$MPC status
if [ ! -f "$MPD_DIR/pid" ]; then
  exit 1 # MPD not running
fi

# Get current song
SONG=$($MPC current)
FILE=$($MPC -f '%file%' current)

if [ "$SONG" = "" ]; then
  exit 2 # No song playing
fi

# Ask for confirmation
# xmessage or zenity could be used if you don't want to run this in a terminal:
#xmessage -buttons 'Yes:1,No:0' "Really remove '$SONG'?"
#zenity --no-wrap --question --text="Really remove '$SONG'?"

echo -n "Really remove '$SONG' [y/N]? "
read RESULT
if [ "$RESULT" != "y" -a "$RESULT" != "Y" ]; then
  exit 3 # Failed confirmation
fi

# Remove from playlist by turning on consume
# But preserve consume status
if [ "$($MPC_NO_ARGS status | grep consume | awk '{ print $10 }')" = "on" ]; then
  CONSUME_AFTER=1
else
  # This order will make it default to off, in case mpc status does not return (on|off)
  CONSUME_AFTER=0
  $MPC --wait consume 1
fi

# This will remove the song from the playlist
$MPC --wait next

# Restore consume status
if [ $CONSUME_AFTER -eq 0 ]; then
  $MPC consume "$CONSUME_AFTER"
fi

# Remove From M3U
# Make a backup of the M3U
cp "$M3U" "$M3U.bak"

# Remove the song from the default playlist
grep -v "$FILE" "$M3U" > "$M3U.temp"
mv "$M3U.temp" "$M3U"

# Greate Success!
echo "Removed '$SONG'"
exit 0
