#!/usr/bin/env bash

# Script for removing the currently playing song from your mpd queue and a
# selected m3u file. Needs mpd and mpc.

mpd_dir="$HOME/.mpd"
playlist_dir="$mpd_dir/playlists"

if [[ ! -f "$mpd_dir/pid" ]]; then
  exit 1 # mpd not running
fi

# Get current song
song=$(mpc -q current)
file=$(mpc -q -f '%file%' current)

if [[ -z $song ]]; then
  exit 2 # No song playing
fi

# Ask for confirmation. xmessage or zenity could be used if you don't want to
# run this in a terminal:
#xmessage -buttons 'Yes:1,No:0' "Really remove '$song'?"
#zenity --no-wrap --question --text="Really remove '$song'?"

echo -n "Really remove '$song' [y/N]? "
read result
if [[ ($result != "y") && ($result != "Y") ]]; then
  exit 3 # Failed confirmation
fi

# Remove from playlist by turning on consume but preserve consume status.
if [[ $(mpc status | awk '/consume/ { print $10 }') = "on" ]]; then
  consume_after=1
else
  # This order will make it default to off, in case mpc status does not return
  # (on|off)
  consume_after=0
  mpc -q --wait consume 1
fi

# This will remove the song from the playlist
mpc -q --wait next

# Restore consume status
if [[ $consume_after -eq 0 ]]; then
  mpc -q consume "$consume_after"
fi

# Remove from playlists in playlist dir
for m3u in $playlist_dir/*.m3u; do
  # Make a backup of the M3U
  cp "$m3u" "$m3u.bak"

  # Remove the song from the default playlist
  # TODO: avoid temporary file
  grep -F -v "$file" "$m3u" > "$m3u.temp"
  mv "$m3u.temp" "$m3u"
done

# Greate Success!
echo "Removed '$song'"
exit 0
