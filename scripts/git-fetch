#!/usr/bin/env ruby

GIT_FORMAT="%C(yellow)%ar%Creset %C(blue)(%ae)%Creset %s"

TEXT_RESET       = "\e[0m"
TEXT_RED         = "\e[0;31m"
TEXT_PURPLE      = "\e[0;35m"
TEXT_YELLOW_BOLD = "\e[1;33m"

def puts_color(color, str)
  puts "#{color}#{str}#{TEXT_RESET}"
end

def git_fetch(repo)
  return system("git --git-dir=\"#{repo}\" fetch --quiet &> /dev/null")
end

def git_log(repo, from, to)
  return `git --git-dir="#{repo}" log --format=format:"#{GIT_FORMAT}" #{from}..#{to}`
end

interactive = false
case ARGV[0]
  when "-i", "--interactive"
    interactive = true
end

File.open("#{ENV["HOME"]}/.git-repos") do |f|
  while (line = f.gets)
    repo = line.chomp
    puts_color(TEXT_PURPLE, "Syncing #{repo}")

    dir     = File.join(ENV["HOME"], repo)
    git_dir = File.join(dir, ".git/")

    if git_fetch(git_dir)
      new_commits = git_log(git_dir, "master", "origin/master")
      if not new_commits.empty?
        puts "  New commits:"
        new_commits.each_line do |line|
          print "   ", line.chomp, "\n"
        end

        if interactive
          puts_color(TEXT_YELLOW_BOLD, "Fetch resulted in new HEAD")
          puts_color(TEXT_YELLOW_BOLD, "Opening #{ENV["SHELL"]} in #{dir}")
          system("cd #{dir} && #{ENV['SHELL']}")
        end
      end
    else
      puts_color(TEXT_RED, "  Error while running fetch")
    end
  end
end
