#!/usr/bin/env python3

import os
import subprocess
import sys
import tempfile


def git_branches(args):
    def find_name_end(string):
        index = string.find(" ", 2)
        return index if index >= 0 else len(string)

    command = ["git", "branch"] + args
    output = subprocess.check_output(command)
    raw_branches = output.decode("utf-8").splitlines()

    current_name = None
    branches = {}
    for string in raw_branches:
        prefix = string[0:2].strip()
        name_end = find_name_end(string)
        name = string[2:name_end]
        comment = string[name_end:].strip()
        if prefix == "*":
            current_name = name
        branches[name] = comment

    return (current_name, branches)


def edit(string):
    with tempfile.NamedTemporaryFile() as fobj:
        fobj.write(string.encode("utf-8"))
        fobj.flush()
        subprocess.check_call([os.environ["EDITOR"], fobj.name])
        fobj.seek(0)
        return fobj.read().decode("utf-8")


def format_output(current_name, branches):
    padding = max(map(len, branches.keys()))

    documentation = """
# git-branch-editor
#
# Commands:
# d <branchname> = delete the branch
# D <branchname> = force delete the branch
# m <oldbranch> <newbranch> = rename the branch
# M <oldbranch> <newbranch> = force rename the branch
# u <upstream> <branchname> = set the branch's upstream
# uu <branchname> = unset the branch's upstream
# * <branchname> = checkout the branch
#
# Other lines are ignored.
"""

    def f(branch):
        (name, comment) = branch
        prefix = "*" if current_name == name else " "
        return prefix + " " + name.ljust(padding, " ") + " " + comment

    branches = "\n".join(map(f, sorted(branches.items())))
    return branches + "\n" + documentation


def parse_command(string):
    if string.startswith("#"):
        return None

    chunks = string.split()
    if not chunks:
        return None

    if chunks[0] == "d":
        return ["git", "branch", "--delete", chunks[1]]
    elif chunks[0] == "D":
        return ["git", "branch", "--force", "--delete", "{}".format(chunks[1])]
    elif chunks[0] == "m":
        return ["git", "branch", "--move", chunks[1], chunks[2]]
    elif chunks[0] == "M":
        return ["git", "branch", "--force", "--move", chunks[1], chunks[2]]
    elif chunks[0] == "u":
        return ["git", "branch", "--set-upstream-to=" + chunks[2], chunks[1]]
    elif chunks[0] == "uu":
        return ["git", "branch", "--unset-upstream", chunks[1]]
    elif chunks[0] == "*":
        return ["git", "checkout", chunks[1]]

    return None


def execute(string, dry_run):
    for line in string.splitlines():
        command = parse_command(line)
        if command:
            print(" ".join(command))
            if not dry_run:
                subprocess.call(command)


def main(args):
    execute(edit(format_output(*git_branches(args))), dry_run=False)

main(sys.argv[1:])
