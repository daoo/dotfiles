#!/usr/bin/env python3

import os
import subprocess
import tempfile


def git_branches():
    command = ["git", "branch"]
    output = subprocess.check_output(command)
    raw_branches = output.decode("utf-8").splitlines()

    current_name = None
    branches = []
    for string in raw_branches:
        prefix = string[0:2].strip()
        name = string[2:]
        if prefix == "*":
            current_name = name
        branches.append(name)

    return (current_name, branches)


def edit(lines):
    fwrite = tempfile.NamedTemporaryFile(mode="w", delete=False)
    tmp_path = fwrite.name
    fwrite.write(lines)
    fwrite.close()

    subprocess.check_call([os.environ["EDITOR"], tmp_path])

    fread = open(tmp_path, "r")
    commands = fread.read()
    fread.close()

    os.remove(tmp_path)
    return commands


def format_output(current, branches):
    documentation = """
# git-branch-editor
#
# Commands:
# * = current branch
# s branch = switch to "branch"
# d branch = delete "branch"
# D branch = delete "branch" (even if not merged)
# po branch = push to origin
# u branch upstream = set upstream for "branch" to "upstream"
# uu branch = unset upstream for "branch"
#
# Other lines are treated as branch renaming.
"""

    def f(branch):
        if current == branch:
            return "* " + branch
        else:
            return branch

    branches = "\n".join(map(f, sorted(branches)))
    return branches + "\n" + documentation


def parse_command(old_branch, string):
    match string.split():
        case ["*", _]:
            return None  # ignore current branch
        case ["s", branch]:
            return ["git", "switch", branch]
        case ["d", branch]:
            return ["git", "branch", "--delete", branch]
        case ["D", branch]:
            return ["git", "branch", "-D", branch]
        case ["u", branch, upstream]:
            return ["git", "branch", "--set-upstream-to=" + upstream, branch]
        case ["uu", branch]:
            return ["git", "branch", "--unset-upstream", branch]
        case [new_branch] if new_branch != old_branch:
            return ["git", "branch", "--move", old_branch, new_branch]
        case ["po", branch]:
            return ["git", "push", "origin", branch]

    return None


def is_command(line):
    stripped = line.strip()
    return stripped and not stripped.startswith("#")


def execute(old_branches, string, dry_run):
    new_branches = list(filter(is_command, string.splitlines()))
    if len(old_branches) != len(new_branches):
        return False

    for i in range(0, len(new_branches)):
        command = parse_command(old_branches[i], new_branches[i])
        if command:
            print(" ".join(command))
            if not dry_run:
                subprocess.call(command)


def main():
    (current, local) = git_branches()
    execute(local, edit(format_output(current, local)), dry_run=False)


main()
