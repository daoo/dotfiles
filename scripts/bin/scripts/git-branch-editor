#!/usr/bin/env python3

import os
import subprocess
import tempfile


def git_branches():
    def find_name_end(string):
        index = string.find(" ", 2)
        return index if index >= 0 else len(string)

    command = ["git", "branch"]
    output = subprocess.check_output(command)
    raw_branches = output.decode("utf-8").splitlines()

    current_name = None
    branches = []
    for string in raw_branches:
        prefix = string[0:2].strip()
        name = string[2:]
        if prefix == "*":
            current_name = name
        branches.append(name)

    return (current_name, branches)


def edit(lines):
    fwrite = tempfile.NamedTemporaryFile(mode='w', delete=False)
    tmp_path = fwrite.name
    fwrite.write(lines)
    fwrite.close()

    subprocess.check_call([os.environ["EDITOR"], tmp_path])

    fread = open(tmp_path, 'r')
    commands = fread.read()
    fread.close()

    os.remove(tmp_path)
    return commands


def format_output(current, branches):
    documentation = """
# git-branch-editor
#
# Commands:
# d = delete the branch
# D = delete the branch (even if not merged)
# po = push to origin
# u <upstream> = set the branch's upstream
# uu = unset the branch's upstream
# * = checkout the branch
#
# Other lines are treated as branch renaming.
"""

    def f(branch):
        if current == branch:
            return "* " + branch
        else:
            return branch

    branches = "\n".join(map(f, sorted(branches)))
    return branches + "\n" + documentation


def parse_command(branch, string):
    chunks = string.split()
    if not chunks:
        return None

    if chunks[0] == "d":
        return ["git", "branch", "--delete", branch]
    elif chunks[0] == "D":
        return ["git", "branch", "-D", branch]
    elif chunks[0] == "po":
        return ["git", "push", "origin", branch]
    elif chunks[0] == "u":
        return ["git", "branch", "--set-upstream-to=" + chunks[1], branch]
    elif chunks[0] == "uu":
        return ["git", "branch", "--unset-upstream", branch]
    elif chunks[0] == "*":
        return ["git", "checkout", branch]
    elif branch != string:
        return ["git", "branch", "--move", branch, string]

    return None


def is_command(line):
    stripped = line.strip()
    return stripped and not stripped.startswith("#")


def execute(old_branches, string, dry_run):
    new_branches = list(filter(is_command, string.splitlines()))
    if len(old_branches) != len(new_branches):
        return False

    for i in range(0, len(new_branches)):
        command = parse_command(old_branches[i], new_branches[i])
        if command:
            print(" ".join(command))
            if not dry_run:
                subprocess.call(command)


def main():
    (current, local) = git_branches()
    execute(local, edit(format_output(current, local)), dry_run=False)


main()
