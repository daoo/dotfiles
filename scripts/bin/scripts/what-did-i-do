#!/usr/bin/env python

import configparser
import filecmp
import os
import posixpath
import subprocess
import sys
import tarfile
import tempfile
import urllib.request

DEFAULT_PACMAN_CACHE_PATH = "/var/cache/pacman/pkg"
PACMAN_CONF_PATH = "/etc/pacman.conf"


def get_owning_package(path):
    try:
        return subprocess.check_output(
            ["pacman", "-Qoq", path],
            universal_newlines=True,
            stderr=subprocess.DEVNULL
        ).strip()
    except subprocess.CalledProcessError:
        pass


def get_package_download_url(name):
    return subprocess.check_output(
        ["pacman", "-Sp", name],
        universal_newlines=True
    ).strip()


def download_package(name, path):
    url = get_package_download_url(name)
    with urllib.request.urlopen(url) as response, open(path, "wb") as file:
        file.write(response.read())


def get_pacman_cache_path():
    config = configparser.ConfigParser(allow_no_value=True)
    config.read(PACMAN_CONF_PATH)
    return config.get("options", "CacheDir", fallback=DEFAULT_PACMAN_CACHE_PATH)


def main(path):
    package = get_owning_package(path)
    if not package:
        sys.stderr.write("%s has no owning package.\n" % path)
        return 1

    # Get path to package if cached, otherwise download it
    download_url = get_package_download_url(package)
    package_path = os.path.join(get_pacman_cache_path(), posixpath.basename(download_url))
    if not os.path.exists(package_path):
        print("Package not found in cache, downloading...")
        package_path = tempfile.mkstemp()[1]
        download_package(package, package_path)

    # Extract target member to temporary directory
    tar_file = tarfile.open(package_path)
    member_path = os.path.relpath(path, "/")
    file_descriptor, extraction_path = tempfile.mkstemp(os.path.basename(member_path))
    with os.fdopen(file_descriptor, "wb") as file:
        member = tar_file.extractfile(member_path)
        file.write(member.read())

    if filecmp.cmp(extraction_path, path):
        print("%s is not modified." % path)
    else:
        subprocess.run(["nvim", "-d", extraction_path, path])

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1]))
