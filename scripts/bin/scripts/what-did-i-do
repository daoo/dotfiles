#!/usr/bin/env python

import configparser
import filecmp
import os
import posixpath
import shlex
import subprocess
import sys
import tempfile
import urllib.request

DEFAULT_PACMAN_CACHE_PATH = "/var/cache/pacman/pkg"
PACMAN_CONF_PATH = "/etc/pacman.conf"


def get_owning_package(path):
    try:
        return subprocess.check_output(
            ["pacman", "-Qoq", path],
            universal_newlines=True,
            stderr=subprocess.DEVNULL
        ).strip()
    except subprocess.CalledProcessError:
        pass


def get_package_download_url(name):
    return subprocess.check_output(
        ["pacman", "-Sp", name],
        universal_newlines=True
    ).strip()


def download_package(name, path):
    url = get_package_download_url(name)
    with urllib.request.urlopen(url) as response, open(path, "wb") as file:
        file.write(response.read())


def get_pacman_cache_path():
    config = configparser.ConfigParser(allow_no_value=True)
    config.read(PACMAN_CONF_PATH)
    return config.get(
        "options",
        "CacheDir",
        fallback=DEFAULT_PACMAN_CACHE_PATH)


def get_package_path(package):
    return os.path.join(
        get_pacman_cache_path(),
        posixpath.basename(get_package_download_url(package)))

def extract_file(path, package_path):
    member_path = os.path.relpath(path, "/")
    file = tempfile.NamedTemporaryFile()
    subprocess.check_call([
        'tar',
        '--extract',
        '--to-stdout',
        '--use-compress-program=zstd',
        '--file=' + package_path,
        member_path], stdout=file)
    return file

def main(diffprog, path):
    if os.path.isdir(path):
        sys.stderr.write("{} is a directory.\n".format(path))
        return

    package = get_owning_package(path)
    if not package:
        sys.stderr.write("{} has no owning package.\n".format(path))
        return

    # Get path to package if cached, otherwise download it
    package_path = get_package_path(package)
    if not os.path.exists(package_path):
        print("Package not found in cache, downloading...")
        package_path = tempfile.mkstemp()[1]
        download_package(package, package_path)

    # Extract target member to temporary directory
    with extract_file(path, package_path) as file:
        try:
            if filecmp.cmp(file.name, path):
                print("{} is not modified.".format(path))
            else:
                subprocess.run(diffprog + [file.name, path])
        except IOError:
            sys.stderr.write("{} error occourd when reading.\n".format(path))


if __name__ == "__main__":
    diffprog = shlex.split(os.getenv('DIFFPROG', 'nvim -d'))

    if len(sys.argv) <= 1:
        print('Usage: {0} path [path...]'.format(sys.argv[0]))
        sys.exit(1)

    for path in sys.argv[1:]:
        main(diffprog, path)
