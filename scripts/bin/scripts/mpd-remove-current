#!/usr/bin/env bash

# Script for removing the currently playing song from your mpd queue and a
# selected m3u file. Needs mpd and mpc.

function printerr() { printf "%s" "$@" 1>&2; }

mpd_dir="$HOME/.mpd"
playlist_dir="$mpd_dir/playlists"

if [[ ! -f "$mpd_dir/pid" ]]; then
  printerr "MPD not running, exiting."
  exit 1
fi

# Get current song
song=$(mpc -q current)
file=$(mpc -q -f '%file%' current)

if [[ -z "$song" ]]; then
  printerr "No song playing, exiting."
  exit 2
fi

# Ask for confirmation. xmessage or zenity could be used if you don't want to
# run this in a terminal:
#xmessage -buttons 'Yes:1,No:0' "Really remove '$song'?"
#zenity --no-wrap --question --text="Really remove '$song'?"

echo -n "Really remove '$song' [y/N]? "
read result
if [[ $result != "y" && $result != "Y" ]]; then
  exit 0
fi

# Remove from playlist by turning on consume and playing the next song.
consume="$(mpc | grep consume | cut -b 66-68)"

# Note extra space in "on ", is included in mpc output
if [[ ! ($consume == "on " || $consume == "off") ]]; then
  printerr "Invalid consume status '$consume', exiting."
  exit 3
fi

if [[ $consume == "off" ]]; then
  mpc -q consume on
fi

mpc -q --wait next

# Restore consume status
if [[ $consume == "off" ]]; then
  mpc -q consume off
fi

for m3u in $playlist_dir/*.m3u; do
  cp "$m3u" "$m3u.bak"

  # TODO: avoid temporary file
  grep -F -v "$file" "$m3u" > "$m3u.temp"
  mv "$m3u.temp" "$m3u"
done

echo "Removed '$song'"
exit 0
