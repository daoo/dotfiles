#!/usr/bin/env python3

import argparse
import itertools
import os
import subprocess
import sys
import tempfile


def concat(iterable):
    return list(itertools.chain.from_iterable(iterable))


def recursive_list_dir(top, include_dirs, include_files):
    for root, dirs, files in os.walk(top):
        if include_files:
            for path in files:
                yield os.path.join(root, path)
        if include_dirs:
            for path in dirs:
                yield os.path.join(root, path)


def list_dir(top, include_dirs, include_files):
    for entry in os.scandir(top):
        if entry.is_file() and include_files:
            yield os.path.join(top, entry.name)

        if entry.is_dir() and include_dirs:
            yield os.path.join(top, entry.name)


def interact(editor, old_paths):
    fwrite = tempfile.NamedTemporaryFile(mode="w", delete=False)
    tmp_path = fwrite.name
    fwrite.write("\n".join(old_paths))
    fwrite.close()

    subprocess.call([editor, tmp_path])

    fread = open(tmp_path, "r")
    new_paths = fread.read().splitlines()
    fread.close()

    os.remove(tmp_path)
    return new_paths


def rename(old_names, new_names, parents):
    assert len(old_names) == len(new_names)
    for old, new in zip(old_names, new_names):
        # Don't rename if the name is unchanged
        if old == new:
            continue

        sys.stdout.write(str.format('Moving "{}" to "{}".\n', old, new))
        if not os.path.exists(new):
            if parents:
                os.renames(old, new)
            else:
                os.rename(old, new)
        else:
            sys.stderr.write(str.format("Warning: file {} already exists.\n", new))


def read_from_stdin():
    return sorted((path.strip() for path in sys.stdin.readlines()))


def read_from_paths(args):
    list_func = recursive_list_dir if args.recursive else list_dir
    paths = (list_func(path, args.directories, args.files) for path in args.paths)
    return sorted(concat(paths))


def program(args):
    old_names = read_from_stdin() if args.paths == ["-"] else read_from_paths(args)
    new_names = interact(args.editor, old_names)

    if len(new_names) == 0:
        sys.stderr.write("Aborting rename due to empty input.\n")
        return 1

    if len(new_names) != len(old_names):
        sys.stderr.write("Error: number of lines have changed, exiting.\n")
        return 1

    rename(old_names, new_names, args.parents)


def main():
    parser = argparse.ArgumentParser(
        description="Interactively rename files.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "paths",
        nargs="+",
        default=".",
        help="directory to rename files in, specify - to read from standard input",
    )

    parser.add_argument(
        "-p", "--parents", action="store_true", help="make parent directories as needed"
    )

    parser.add_argument(
        "-e",
        "--editor",
        action="store",
        help="the editor to use",
        default=os.environ["EDITOR"],
    )

    parser.add_argument(
        "-r",
        "--recursive",
        action="store_true",
        help="recurseivly rename in sub-directories",
    )

    parser.add_argument(
        "--files", dest="files", action="store_true", help="rename files"
    )
    parser.add_argument(
        "--no-files", dest="files", action="store_false", help="do not rename files"
    )
    parser.set_defaults(files=True)

    parser.add_argument(
        "--directories",
        dest="directories",
        action="store_true",
        help="rename directories",
    )
    parser.add_argument(
        "--no-directories",
        dest="directories",
        action="store_false",
        help="do not rename directories",
    )
    parser.set_defaults(directories=True)

    sys.exit(program(parser.parse_args()))


main()
