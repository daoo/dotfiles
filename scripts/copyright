#!/usr/bin/env ruby

languages = {
  "java" => {
    :ext    => ".java",
    :before => "package",
    :header => lambda { |data|
      return [ "/*",
               " * Copyright (c) #{data[:year]} #{data[:name]}, see license.txt for more info.",
               " */",
               "" ] } },
  "haskell" => {
    :ext    => ".hs",
    :before => "module",
    :header => lambda { |data|
      return [ "--",
               "-- Copyright (c) #{data[:year]} #{data[:name]}, see license.txt for more info.",
               "--",
               "" ] } }
}

def ensure_headers(files, lang, data)
  header = lang[:header].call(data)
  before = lang[:before]

  files.each do |file|
    lines = Array.new()
    File.open(file) do |f|
      lines = f.readlines
    end

    lines.map! { |line| line.chomp }

    if not lines[0, header.length] == header
      # Remove everything before a specific line
      no_header = lines.drop_while { |l| !l.start_with?(before) }

      output = header + no_header

      File.open(file, 'w') do |f|
        f.puts output
      end
    end
  end
end

if ARGV.length != 3
  puts "Usage:"
  puts "#{__FILE__} LANGUAGE YEAR NAME"
  exit 1
else
  lang_str = ARGV[0]
  year     = ARGV[1]
  name     = ARGV[2]

  if languages.has_key?(lang_str)
    lang = languages[lang_str]

    # TODO: Use ruby methods instead
    files = `find . -iname '*#{lang[:ext]}'`.split("\n")

    data = { :name => name, :year => year }

    ensure_headers(files, lang, data)

    exit 0
  else
    puts "Language #{lang} is not supported"
    exit 1
  end
end
