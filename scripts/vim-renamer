#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'
require 'tempfile'

def files_recursive(dir)
  if not File.directory?(dir)
    raise "Error, #{dir} not a directory"
  end

  lst       = []
  unvisited = [Pathname.new(dir)]
  while not unvisited.empty? do
    path = unvisited.pop()

    path.children.each do |child|
      if child.file?
        lst << child.to_s
      elsif child.directory?
        lst << child.to_s + "/"
        unvisited << child
      end
    end
  end

  return lst
end

def files(dir)
  return Pathname(dir).children.map do |child|
    if child.directory?
      child.to_s + "/"
    else
      child.to_s
    end
  end
end

recursive = ARGV.size > 0 and ARGV[0] == "-r"

# Works with PWD
if recursive
  old_names = files_recursive(".")
else
  old_names = files(".")
end

Tempfile.open('random') do |tf|
  tf.puts("# Lines starting wiht # will be ignored")
  tf.puts("# Do not change the order of the file names")
  old_names.each do |name|
    tf.puts(name)
  end
  tf.flush()

  system("vim #{tf.path()}")

  tf.rewind
  new_names = tf.readlines.map { |line| line.chomp }.select { |name| not name.start_with?("#") }

  if new_names.length != old_names.length
    puts "Number of lines have changed! Exiting."
    exit 1
  else
    while not new_names.empty? and not old_names.empty?
      old = old_names.pop()
      new = new_names.pop()

      # Don't rename if we don't have to
      if old != new
        if not File.exists?(new)
          FileUtils.mv(old, new)
        else
          puts "File #{new} already exists, not renaming."
        end
      end
    end
  end
end
