#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'
require 'tempfile'

def files_recursive(dir)
  if not File.directory?(dir)
    raise "Error, #{dir} not a directory"
  end

  lst       = []
  unvisited = [Pathname.new(dir)]
  while not unvisited.empty? do
    path = unvisited.pop()

    begin
      path.children.each do |child|
        begin
          if child.file?
            lst << child.to_s
          elsif child.directory?
            lst << child.to_s + "/"
            unvisited << child
          end
        rescue
          $stderr.puts "Could not read #{child.to_s}, skipping."
        end
      end
    rescue
      $stderr.puts "Could not open #{path.to_s}, skipping."
    end
  end

  return lst
end

def files(dir)
  return Pathname(dir).children.map do |child|
    if child.directory?
      child.to_s + "/"
    else
      child.to_s
    end
  end
end

def interact(editor, names)
  Tempfile.open('random') do |tf|
    tf.puts(names)
    tf.flush()

    system(editor + " " + tf.path())

    tf.rewind
    return tf.readlines.map { |line| line.chomp }
  end
end

def main(editor, dir, recursive)
  old_names = recursive ? files_recursive(dir) : files(dir)
  old_names.sort!

  new_names = interact(editor, old_names)

  if new_names.length != old_names.length
    $stderr.puts "Number of lines have changed, exiting."
    exit 1
  else
    for i in (0..new_names.length)
      old = old_names[i]
      new = new_names[i]

      # Don't rename if we don't have to
      if old != new
        if not File.exists?(new)
          FileUtils.mv(old, new)
        else
          $stderr.puts "File #{new} already exists, skipping."
        end
      end
    end
  end
end

editor = ENV["EDITOR"] || "vim"
recursive = ARGV.size > 0 and ARGV[0] == "-r"

main(editor, ".", recursive)
