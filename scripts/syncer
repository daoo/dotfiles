#!/usr/bin/env ruby

require 'set'
require 'find'
require 'tempfile'

def main(argv)
  if argv.length < 2
    puts "Usage: syncer INFILE OUTDIR"
    exit 0
  end

  # Get infile and outdir
  outdir = argv.pop.chomp
  infile = argv.pop.chomp

  if not File.exists?(infile)
    puts "File #{infile} does not exist"
    exit 1
  end

  if not Dir.exist?(outdir)
    puts "Directory #{outdir} does not exist"
    exit 1
  end

  inlines = Array.new()
  File.open(infile) do |path|
    inlines = path.readlines()
  end

  m3u = Array.new()
  m3u_file_names = Set.new()
  inlines.each do |path|
    tmp = path.chomp
    m3u << tmp
    m3u_file_names.add(File.basename(tmp))
  end

  # Find and remove sourcedir, needed for rsync
  m3u_split = m3u.collect { |l| l.split(File::SEPARATOR) }
  common = m3u_split.first
  m3u_split.each do |line|
    common = common & line
  end
  sourcedir = common.join(File::SEPARATOR)

  Tempfile.open('random') do |tf|
    m3u_split.each do |full_path|
      file = (full_path - common).join(File::SEPARATOR)
      tf.puts file
    end
    # Need to flush for all m3u_split to be written
    tf.flush

    system("rsync --progress --delete --size-only --files-from='#{tf.path}' '#{sourcedir}' '#{outdir}'")

    # Remove files in outdir that are not in infile
    Find.find(outdir) do |path|
      if !File.directory?(path)
        checkname = File.basename(path)
        # NOTE: Only compares file names, might clash if there are several albums with same song names (unlikely)...
        if !m3u_file_names.include?(checkname)
          print "Remove #{checkname} [y/N]? "
          ans = gets.chomp.downcase
          if ans == "y"
            FileUtils.rm(path)
          end
        end
      end
    end
  end
end

main(ARGV)

# vim: set fdm=marker :
