#!/usr/bin/env ruby

def for_paths(dir)
  Dir.foreach(dir) do |f|
    if f != "." and f != ".."
      yield(File.join(dir, f))
    end
  end
end

require 'fileutils'

if ARGV.length != 2
  puts "Usage: syncer INFILE OUTDIR"
  exit 0
end

infile = ARGV[0].chomp
outdir = ARGV[1].chomp

if !Dir.exist?(outdir)
  puts "Directory #{outdir} does not exist"
  exit 1
end

songs = Array.new()

puts "Copying..."
File.open(infile, "r") do |file|
  i = 0
  while line = file.gets
    opath = line.chomp
    fname = File.basename(opath)

    tmp    = File.dirname(opath).split("/")
    album  = tmp[-1]
    artist = tmp[-2]

    tmp  = fname.split(".").first()
    song = tmp[3, tmp.length]

    id = "#{artist} - #{album} - #{song}"

    ndir  = File.join(outdir, artist, album)
    npath = File.join(ndir, fname)

    if File.exists?(opath)
      if not File.exists?(npath)
        FileUtils.mkdir_p(ndir)
        FileUtils.cp(opath, ndir)
        puts id
        i += 1
      else
        puts "File exists in target #{id}"
      end

      songs << fname
    else
      puts "File #{opath} not found"
    end
  end

  puts "#{i} file(s) copied"
end

puts
puts "Remove files not in the infile..."
for_paths(outdir) do |artist|
  for_paths(artist) do |album|
    for_paths(album) do |f|
      if not songs.include?(File.basename(f))
        print "Remove '#{f}' [y/N]? "
        remove = STDIN.gets.chomp.downcase
        if remove == "y"
          FileUtils.rm(File.join(outdir, f))
          puts "Removed '#{f}'"
        end
      end
    end
  end
end
