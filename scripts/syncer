#!/usr/bin/env ruby

require 'find'
require 'set'

def copy(infile, basedir, outdir)
  start = basedir.length
  files = Set.new()
  File.open(infile).readlines.each do |line|
    file     = line.chomp
    specific = file.slice(start, file.length)
    target   = File.join(outdir, specific)

    if File.exists?(file)
      if not File.exists?(target)
        print "Copying #{specific}... "

        dir = File.dirname(target)
        IO.popen(["mkdir", "-p", dir]) # TODO: Only creat dir when changed
        IO.popen(["cp", file, target])

        puts "Done."
      end
    else
      puts "File #{file} does not exist"
    end

    files << file
  end

  return files
end

def clean(keep, basedir, outdir)
  start = outdir.length
  Find.find(outdir) do |target|
    if !File.directory?(target)
      specific = target.slice(start, target.length)
      file     = File.join(basedir, specific)

      if !keep.include?(file)
        print "Remove #{specific} [y/N]? "
        ans = STDIN.gets.chomp.downcase
        if ans == "y"
          IO.popen(["rm", "-f", target])
        end
      end
    end
  end
end

def main(infile, basedir, outdir)
  files = copy(infile, basedir, outdir)
  clean(files, basedir, outdir)
end

if ARGV.length != 3
  puts "Usage: syncer INFILE BASEDIR OUTDIR"
  exit 0
end

infile  = ARGV[0].chomp
basedir = ARGV[1].chomp
outdir  = ARGV[2].chomp

if not File.exists?(infile)
  puts "File #{infile} does not exist"
  exit 1
end

if not Dir.exists?(basedir)
  puts "Directory #{basedir} does not exist"
  exit 1
end

if not Dir.exist?(outdir)
  puts "Directory #{outdir} does not exist"
  exit 1
end

main(infile, basedir, outdir)

# vim: set fdm=marker :
