" daoo's .vimrc

" {{{ Pathogen
let mapleader=" "
set nocompatible
execute pathogen#infect()
syntax on
filetype plugin indent on
call yankstack#setup()
" }}}
" {{{ Settings
" moving around, searching and patterns
set ignorecase
set incsearch
set smartcase

" displaying text
set fillchars=vert:│
set lazyredraw
set list
set listchars=tab:▸\ ,extends:❯,precedes:❮
set nowrap
set number
set relativenumber
set scrolloff=5

" syntax, highlighting and spelling
set hlsearch
set cursorcolumn
set cursorline

" multiple windows
set hidden
set laststatus=2

" message and info
set noerrorbells
set novisualbell
set showcmd
set vb
set t_vb=

" editing text
set backspace=start,indent,eol
set formatoptions=tcqro
set nojoinspaces
set undolevels=500

" tabs and indenting
set expandtab
set shiftround
set shiftwidth=2
set smarttab
set softtabstop=2

" folding
set foldlevel=0
set foldmethod=indent
set foldnestmax=10
set nofoldenable

" reading and writing files
set autowrite
set nobackup
set backupdir=/tmp

" the swap file
set noswapfile
set directory=/tmp

" command line editing
set history=500
set wildmenu
set wildmode=list:longest,full

" multi-byte characters
set encoding=utf-8

" other
runtime ftplugin/man.vim
colorscheme mustang
syntax on

syn match myTodo contained "\<\(TODO\|FIXME\)"
hi def link myTodo Todo
" }}}
" {{{ Commands
command! W %!sudo tee > /dev/null %

" Only shown when not in insert mode.
augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:⌴
  au InsertLeave * :set listchars+=trail:⌴
augroup END

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

function! LongLineHLToggle()
  if exists('w:long_line_match')
    silent! call matchdelete(w:long_line_match)
    unlet w:long_line_match
  elseif &textwidth > 0
    let w:long_line_match = matchadd('ErrorMsg', '\%>'.&tw.'v.\+', -1)
  else
    let w:long_line_match = matchadd('ErrorMsg', '\%>80v.\+', -1)
  endif
endfunction

function! SwitchSourceHeader()
  let ext = expand("%:e")
  if (ext == "cpp")
    e %:r.hpp
  elseif (ext == "hpp")
    e %:r.cpp
  elseif (ext == "h")
    e %:r.c
  elseif (ext == "c")
    e %:r.h
  endif
endfunction

function! SetSpell(lang)
  setlocal spell
  execute "setlocal spelllang=" . a:lang
  execute "setlocal spellfile=" . "$HOME/.vim/spell/" . matchstr(a:lang, "[a-zA-Z][a-zA-Z]") . "." . &encoding . ".add"
endfunction
" }}}
" {{{ Disabled stupid keys and commands
noremap Q <nop>

" Arrow keys
inoremap <down>  <nop>
inoremap <left>  <nop>
inoremap <right> <nop>
inoremap <up>    <nop>
noremap  <down>  <nop>
noremap  <left>  <nop>
noremap  <right> <nop>
noremap  <up>    <nop>

inoremap <c-left>  <nop>
inoremap <c-right> <nop>
noremap  <c-left>  <nop>
noremap  <c-right> <nop>

" Above arrow keys
inoremap <del>      <nop>
inoremap <end>      <nop>
inoremap <home>     <nop>
inoremap <pagedown> <nop>
inoremap <pageup>   <nop>
noremap  <del>      <nop>
noremap  <end>      <nop>
noremap  <home>     <nop>
noremap  <pagedown> <nop>
noremap  <pageup>   <nop>
" }}}
" {{{ Key bindings
" Make
nnoremap <f5> :silent make! run \| redraw!<cr>
nnoremap <f8> :silent make! \| redraw!<cr>
nnoremap <f9> :silent make! tags \| redraw!<cr>
nnoremap <f10> :silent make! lint \| redraw!<cr>
nnoremap <f11> :silent make! doc \| redraw!<cr>

" Quickfix
nmap <script> <silent> <leader>wq :call ToggleQuickfixList()<cr>
nmap <script> <silent> <leader>wl :call ToggleLocationList()<cr>
nnoremap <leader>wn :cnext<cr>
nnoremap <leader>wp :cprevious<cr>

" Alignment and clean up
nnoremap <leader>ae :let @"=@/<cr>:%s/\s\+$//<cr>:let @/=@"<cr>
nnoremap <leader>ap Vapk:sort<cr>
vmap <leader>ap :sort<cr>
vmap <return> <plug>(EasyAlign)

" Yanking
nnoremap <leader>ya :%y+<cr>
nmap <leader>yp <Plug>yankstack_substitute_older_paste
nmap <leader>yn <Plug>yankstack_substitute_newer_paste

" Files
nmap <silent> <f2> <Plug>FileBeagleOpenCurrentBufferDir
nnoremap <leader>es :mksession! ~/.session.vim<cr>
nnoremap <leader>el :source ~/.session.vim<cr>
nnoremap <leader>ef :e %<cr>
nnoremap <leader>eve :vsplit $MYVIMRC<cr>
nnoremap <leader>evs :source $MYVIMRC<cr>

" Spell
nnoremap <leader>se :call SetSpell("en_us")<cr>
nnoremap <leader>ss :call SetSpell("sv")<cr>
nnoremap <leader>so :setlocal nospell<cr>

" Diff
nnoremap <leader>dt :diffthis<cr>
nnoremap <leader>du :diffupdate<cr>
nnoremap <leader>do :diffoff!<cr>

" Searching
nmap <leader>m <Plug>(quickhl-manual-this)
xmap <leader>m <Plug>(quickhl-manual-this)
nmap <leader>M <Plug>(quickhl-manual-reset)
xmap <leader>M <Plug>(quickhl-manual-reset)
nnoremap <leader>fc :nohlsearch<cr>
nnoremap <leader>fg :Ag '<cword>'<cr>
nnoremap <leader>fl /<c-r>=expand("<cword>")<cr><cr>
nnoremap <leader>fr :%s@<c-r>=expand("<cword>")<cr>@
vnoremap <leader>fr y:%s@<c-r>"@
nnoremap N Nzz
nnoremap n nzz

" Saving
noremap <c-s> :w<cr>
inoremap <c-s> <esc>:w<cr>a

" Split/tabs navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Misc
inoremap <c-space> <c-x><c-o>
nnoremap <f4> :GundoToggle<cr>
nnoremap <leader>t :call LongLineHLToggle()<cr>
nnoremap <leader>h :call SwitchSourceHeader()<cr>
nnoremap K kJ
vnoremap <c-b> c<c-r>=<c-r>"<cr><esc>
vnoremap <c-x> y`]a = <c-r>=<c-r>"<cr><esc>
" }}}
" {{{ Addons
let g:filebeagle_suppress_keymaps = 1

let g:yankstack_map_keys = 0

let g:airline_right_sep=''
let g:airline_left_sep=''

let g:ctrlp_working_path_mode = 0
let g:ctrlp_switch_buffer     = 0

let g:ctrlp_custom_ignore = {
  \ 'file': '\v\.(pdf|xcf|bmp|gif|png|jpg|swp|bak|pyc|class|o|hi|exe|dll|pdb|agdai|agda\~)$',
  \ 'dir': '\v(\.(git|hg|svn))|((src/.*)@<!(build|dist|cabal-dev))$'
  \ }
" }}}
" vim: fdm=marker :
