snippet inc "include header" b!
#include "`!p snip.rv = snip.basename + ".hpp"`"
endsnippet

snippet cl "class" b
class ${1:`!p snip.rv = snip.basename or "Name"`} {
	public:
		${1/(\w+).*/$1/}(${2:arguments});
		virtual ~${1/(\w+).*/$1/}();

	private:
		${0:/* data */}
};
endsnippet

snippet in "interface" b
class ${1:I`!p snip.rv = snip.basename or "Name"`} {
	public:
		virtual ~$1() { }

		virtual ${4:void} ${2:myMethod}(${3:arguments}) = 0;
};
endsnippet

snippet ns "namespace" b
namespace ${1:`!p
res = None
if path and os.path.exists(path):
	full_path = os.path.abspath(path)
	if "src/" in full_path:
		dir_path = os.path.dirname(full_path)
		tmp      = dir_path.split("/")
		ns       = []
		while tmp:
			s = tmp.pop()
			if s == "src":
				break
			else:
				ns.insert(0, s.lower())

		if ns:
			res = "::".join(ns)

if res:
	snip.rv = res
else:
	snip.rv = "somespace"`} {
	${0}
};
endsnippet

snippet us "using namespace" b
using namespace ${0:std};
endsnippet

snippet usb "using namespace boost" b
using namespace boost${0:::something};
endsnippet
